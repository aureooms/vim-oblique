Include: setup.vader

# Basic search
# ==============================================================================

Do (Highlight NOT cleared when cursor is not moved):
  /license\<cr>
Then:
  AssertEqual [3, 5], [line('.'), col('.')]
  AssertEqual 1, &hlsearch
  doautocmd CursorMoved
  AssertEqual 1, &hlsearch

Do (Highlight cleared when cursor is moved):
  /license\<cr>l
Then:
  AssertEqual [3, 6], [line('.'), col('.')]
  AssertEqual 1, &hlsearch
  doautocmd CursorMoved
  AssertEqual 0, &hlsearch

Do (Highlight cleared when switched to insert mode):
  /license\<cr>i\<esc>
Then:
  AssertEqual 0, &hlsearch

Do (Highlight is restored on n):
  /license\<cr>ln
Then:
  AssertEqual [9, 16], [line('.'), col('.')]
  AssertEqual 1, &hlsearch
  doautocmd CursorMoved
  AssertEqual 1, &hlsearch

Execute (g:oblique#clear_highlight set to 0):
  let g:oblique#clear_highlight = 0
  " To clear lingering autocmd
  doautocmd CursorMoved

Do (Highlight not cleared even when switched to insert mode):
  /license\<cr>i\<esc>
Then:
  AssertEqual 1, &hlsearch

Execute (Unlet g:oblique#clear_highlight):
  unlet g:oblique#clear_highlight

Do (n and N on forward search):
  /copy\<cr>
  nnnN
Then:
  AssertEqual 8, line('.')
  doautocmd CursorMoved
  AssertEqual 1, &hlsearch

Do (n and N on backward search):
  G
  ?copy\<cr>
  nnnN
Then:
  AssertEqual 8, line('.')
  doautocmd CursorMoved
  AssertEqual 1, &hlsearch

Do (/ with command):
  5G
  d/dealings\<cr>

Expect:
  Copyright (c) 2014 Junegunn Choi

  MIT License

  DEALINGS IN THE SOFTWARE.

Do (/ with command and nowrapscan):
  :set nowrapscan\<cr>
  5G
  d/dealings\<cr>

Expect:
  Copyright (c) 2014 Junegunn Choi

  MIT License

  DEALINGS IN THE SOFTWARE.

Then:
  set wrapscan

# CTRL-L
# ==============================================================================

Do (FIXME CTRL-L):
  /here
  \<C-L>\<C-L>\<C-L>\<C-L>\<C-L>\<CR>
  gny
Then:
  AssertEqual "hereby gr", @"

# /Offsets
# ==============================================================================

Do (/0):
  /here/0
  \<CR>
  yiw
Then:
  AssertEqual "Permission", @"

Do (/+0):
  /here/+0
  \<CR>
  yiw
Then:
  AssertEqual "Permission", @"

Do (/-0):
  /here/-0
  \<CR>
  yiw
Then:
  AssertEqual "Permission", @"

Do (/+):
  /here/+
  \<CR>
  yiw
Then:
  AssertEqual "a", @"

Do (/3):
  /here/3
  \<CR>
  yiw
Then:
  AssertEqual "without", @"

Do (Repeat with //3):
  //3
  \<CR>
  yiw
Then:
  AssertEqual "without", @"

Do (/+3):
  /here/+3
  \<CR>
  yiw
Then:
  AssertEqual "without", @"

Do (/-):
  /here/-
  \<CR>
  yy
Then:
  AssertEqual "\n", @"

Do (/-2):
  /here/-2
  \<CR>
  yiw
Then:
  AssertEqual "MIT", @"

Do (/e):
  /here/e
  \<CR>
  xyiw
Then:
  AssertEqual "herby", @"

Do (/e+):
  /here/e+
  \<CR>
  xyiw
Then:
  AssertEqual "herey", @"

Do (/e2):
  /here/e2
  \<CR>
  xbyiw
Then:
  AssertEqual "hereb", @"

Do (/e+2):
  /here/e+2
  \<CR>
  xbyiw
Then:
  AssertEqual "hereb", @"

Do (/e-):
  /here/e-
  \<CR>
  xyiw
Then:
  AssertEqual "heeby", @"

Do (/e-12):
  /here/e-12
  \<CR>
  xyiw
Then:
  AssertEqual "Permision", @"

Do (/s):
  /here/s
  \<CR>
  xyiw
Then:
  AssertEqual "ereby", @"

Do (/b):
  /here/b
  \<CR>
  xyiw
Then:
  AssertEqual "ereby", @"

Do (/s+):
  /here/s+
  \<CR>
  xyiw
Then:
  AssertEqual "hreby", @"

Do (/b+):
  /here/b+
  \<CR>
  xyiw
Then:
  AssertEqual "hreby", @"

Do (/s2):
  /here/s2
  \<CR>
  xyiw
Then:
  AssertEqual "heeby", @"

Do (/b2):
  /here/b2
  \<CR>
  xyiw
Then:
  AssertEqual "heeby", @"

Do (/s+2):
  /here/s+2
  \<CR>
  xyiw
Then:
  AssertEqual "heeby", @"

Do (/b+2):
  /here/b+2
  \<CR>
  xyiw
Then:
  AssertEqual "heeby", @"

Do (/s-):
  /here/s-
  \<CR>
  xyiw
Then:
  AssertEqual "ishereby", @"

Do (/b-):
  /here/b-
  \<CR>
  xyiw
Then:
  AssertEqual "ishereby", @"

Do (/s-2):
  /here/s-2
  \<CR>
  xbyiw
Then:
  AssertEqual "i", @"

Do (/b-2):
  /here/b-2
  \<CR>
  xbyiw
Then:
  AssertEqual "i", @"

# Repeat
# ==============================================================================

Do (d/):
  d/limit\<CR>

Expect:
  limitation the rights to use, copy, modify, merge, publish,
  distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Do (FIXME d/.):
  d/limit\<CR>
  l.

Expect:
  LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

^ Very magic (deprecated)
^ ==============================================================================
Do (/.):
  /.\<cr>
Then:
  AssertEqual [1, 1], [line('.'), col('.')]

Do (/\V.):
  /\V.\<cr>
Then:
  AssertEqual [14, 63], [line('.'), col('.')]

Execute (Set g:oblique#very_magic):
  let g:oblique#very_magic = 1

Do (\V is automatically prepended to .):
  /.\<cr>
Then:
  AssertEqual [14, 63], [line('.'), col('.')]

Do (Delete prepended \V):
  /\<c-u>.\<cr>
Then:
  AssertEqual [1, 1], [line('.'), col('.')]

Execute (Unlet g:oblique#very_magic):
  unlet g:oblique#very_magic

# Prefix
# ==============================================================================

Execute (Set g:oblique#very_magic):
  let g:oblique#prefix = '\V'

Do (\V is automatically prepended to .):
  /.\<cr>
Then:
  AssertEqual [14, 63], [line('.'), col('.')]

Do (Delete prepended \V):
  /\<c-u>.\<cr>
Then:
  AssertEqual [1, 1], [line('.'), col('.')]
  unlet g:oblique#prefix

# Star-search
# ==============================================================================
Do (*-search):
  jjw*
Then:
  AssertEqual '\V\<License\>', histget('/', -1)
  AssertEqual [3, 5], [line('.'), col('.')]
  AssertEqual 1, &hlsearch

Do (*-search and n: no more match):
  jjw*n
Then:
  AssertEqual [3, 5], [line('.'), col('.')]
  AssertEqual 1, &hlsearch

Do (*-search and move cursor to clear highlight):
  jjw*l
Then:
  AssertEqual [3, 6], [line('.'), col('.')]
  doautocmd CursorMoved
  AssertEqual 0, &hlsearch

Do (#-search in visual mode):
  9Gfl
  ve#
Then:
  AssertEqual '\Vlicense', histget('/', -1)
  AssertEqual [9, 16], [line('.'), col('.')]

Do (#-search in visual mode then n):
  9Gfl
  ve#n
Then:
  AssertEqual [3, 5], [line('.'), col('.')]

Do (*-search around a paragraph in visual mode):
  5Gvap*
  dgn

Expect:
  Copyright (c) 2014 Junegunn Choi

  MIT License

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# gStar-search
# ==============================================================================
Do (g*-search):
  6G
  wg*N
Then:
  AssertEqual '\Vcopy', histget('/', -1)
  AssertEqual [1, 1], [line('.'), col('.')]
  AssertEqual 1, &hlsearch

Do (g#-search):
  6G
  wg#n
Then:
  AssertEqual '\Vcopy', histget('/', -1)
  AssertEqual [1, 1], [line('.'), col('.')]
  AssertEqual 1, &hlsearch

# Fuzzy-search
# ==============================================================================

Do (z/ to fuzzy-search):
  z/ccc\<cr>
  gn"ay
  nnNgn"by
  ngn"cy
Then:
  AssertEqual [13, 11], [line('.'), col('.')]
  AssertEqual 'Copyright (c) 2014 Junegunn C', @a
  AssertEqual 'copy of this software and associated doc', @b
  AssertEqual 'copyright notice and this permission notic', @c

Do (z? to backward-fuzzy-search):
  G
  z?ccc\<cr>
  gn"ay
  nnNgn"by
  ngn"cy
Then:
  AssertEqual [6, 3], [line('.'), col('.')]
  AssertEqual 'CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN C', @a
  AssertEqual 'copyright notice and this permission notic', @b
  AssertEqual 'copy of this software and associated doc', @c

# Regression
# ==============================================================================

Do (Invalid regular expression should not throw exception):
  /\?\<bs>\<bs>right\<cr>
Then:
  AssertEqual [1, 5], [line('.'), col('.')]

Execute (n should not raise error when no match is found):
  execute "normal /xxxyyyzzz\<cr>n"

Execute (N also should not raise error when no match is found):
  execute "normal /xxxyyyzzz\<cr>N"

Execute (n should not raise error in visual mode when no match is found):
  execute "normal v/xxxyyyzzz\<cr>N"

Given:
    \ { 'on': ['GHDashboard', 'GHActivity'] }
Do (Star-search should not fail in the presence of backslashes):
  V*

# (#9) Event
Execute (Set up custom autocommand):
  autocmd User Oblique       normal! m`gU$``
  autocmd User ObliqueStar   normal! m`gUiW``
  autocmd User ObliqueRepeat normal! ~h

Given:
  hello
  -----
  world

Do:
  /l\<cr>
  nn

Expect:
  heLlO
  -----
  worLd

Given:
  hello
  -----
  hello world

Do:
  ll*n

Expect:
  HELLO
  -----
  Hello world

Execute (Clear autocommands):
  autocmd! User Oblique
  autocmd! User ObliqueStar
  autocmd! User ObliqueRepeat

# (#2) Open fold on match
Given:
  1. a
  2. b
  3. a
  4. b
  5. a

Do (Open fold on match (/)):
* Fold line 2 & 3
  jzfj
* Go back to top
  gg
* / search to b
  /b\<cr>

Then:
  AssertEqual -1, foldclosed('.')

Do (Open fold on match (* n)):
* Fold line 2 & 3
  jzfj
* Go to a at line 1
  ggW
* Search to the 2nd occurrence of a
  *n

Then:
  AssertEqual -1, foldclosed('.')

# Error on '**'
Given (Pattern with *s):
  a/*/b/**/c

Do (/**):
  fb
  /**\<cr>
  x

Expect:
  a/*//**/c

# Empty pattern == previous pattern
Given:
  abc
  abc
  abc
  abc

  xyz
  xyz
  xyz
  xyz

Do (Repeat previous search with empty string):
  /bc\<cr>
  D
  /\<cr>
  D
  //\<cr>
  D
  G$
  ?yz\<cr>
  D
  nD
  ?\<cr>
  nD

Expect:
  a
  a
  a
  abc

  x
  xyz
  x
  x

Do (Should also work with star-search):
  *
  nnn
  ?\<cr>
  nnD

  G#
  nnn
  /\<cr>
  nnD


Expect:
  abc

  abc
  abc

  xyz
  xyz

  xyz

# \< and \> should not be used is the start/end of the pattern is not iskeyword
Given:
  =====
  =====
  =====

Do (Delete the second occurrence of =====):
  *nD

Expect:
  =====

  =====

# No string under cursor
Given:
Do (Star-search on empty line):
  /apple\<cr>
  *
  :AssertEqual 'apple', @/\<cr>

Given:
  1apple
  2apple
  3apple
  4apple
  5apple
  6apple

Do (Counted n/N):
  /apple\<cr>
  3nD
  2NCbanana

Expect:
  1apple
  2banana
  3apple
  4
  5apple
  6apple

# (#21) Search pattern highlighted when it isn't supposed to be
Given:
    test this
  test this

Execute (Search, move, and cancelled search):
  execute "normal /test\<cr>"
  AssertCurrentMatch 'Should highlight current match'
  normal! w
  doautocmd CursorMoved
  AssertCurrentMatch! 'Should clear highlight when cursor is moved'
  execute "normal /this\<bs>\<bs>\<bs>\<bs>"
  AssertCurrentMatch! 'Cancelled search should not restore highlight'

# (#20) gd/gD highlighting breaks after doing some search
Execute (gd):
  normal jgd
  AssertEqual 1, line('.')
  AssertEqual 3, col('.')
  AssertCurrentMatch 'Should highlight keyword on gd'
  normal! w
  doautocmd CursorMoved
  AssertCurrentMatch! 'Highlighting cleared on cursor move'

# (#25) Fix current word highlighting for star-search
Given:
  test this test

Execute (#):
  normal e#
  Assert filter(getmatches(), "v:val.group == 'ObliqueCurrentMatch'")[0].pattern
    \ =~ '%1c'

# (#26) Add [count] support for all commands
Given:
  item 1
  item 2
  item 3
  item 4
  item 5
  - item 6

Execute (/ and ? with count):
  normal! gg0
  execute "normal /item\<cr>"
  AssertEqual 1, line('.')
  AssertEqual 1, col('.')

  normal! gg0
  execute "normal 1/item\<cr>"
  AssertEqual 1, line('.')
  AssertEqual 1, col('.')

  normal! gg0
  execute "normal 2/item\<cr>"
  AssertEqual 2, line('.')
  AssertEqual 1, col('.')
  execute "normal 3/item\<cr>"
  AssertEqual 4, line('.')
  AssertEqual 1, col('.')
  execute "normal 2?item\<cr>"
  AssertEqual 3, line('.')
  AssertEqual 1, col('.')

Execute (/ with cursor not on the first match):
  normal! ggw
  execute "normal /item\<cr>"
  AssertEqual 2, line('.')
  AssertEqual 1, col('.')

  normal! ggw
  execute "normal 1/item\<cr>"
  AssertEqual 2, line('.')
  AssertEqual 1, col('.')

  normal! ggw
  execute "normal 2/item\<cr>"
  AssertEqual 3, line('.')
  AssertEqual 1, col('.')

Execute (* and # with count):
  normal 2*
  AssertEqual 2, line('.')
  AssertEqual 1, col('.')
  normal 3*
  AssertEqual 4, line('.')
  AssertEqual 1, col('.')
  normal 2#
  AssertEqual 3, line('.')
  AssertEqual 1, col('.')

Execute (* and # with cursor not on the first match):
  normal! G0
  normal *
  AssertEqual 6, line('.')
  AssertEqual 1, col('.')

  normal! G0
  normal 1*
  AssertEqual 6, line('.')
  AssertEqual 1, col('.')

  normal! G0
  normal 2*
  AssertEqual 1, line('.')
  AssertEqual 1, col('.')

  normal! G0
  normal #
  AssertEqual 6, line('.')
  AssertEqual 1, col('.')

  normal! G0
  normal 1#
  AssertEqual 6, line('.')
  AssertEqual 1, col('.')

Execute (Correct highlighting on * and #):
  normal G0*
  let match = filter(getmatches(), "v:val.group == 'ObliqueCurrentMatch'")[0].pattern
  Assert match =~ '%6l'
  Assert match =~ '%3c'

  normal G0#
  let match = filter(getmatches(), "v:val.group == 'ObliqueCurrentMatch'")[0].pattern
  Assert match =~ '%6l'
  Assert match =~ '%3c'

Given:
    item
    item

Execute (#39 Visual-* on the region starting with non-keyword character):
  normal G0lvft*
  let match = filter(getmatches(), "v:val.group == 'ObliqueCurrentMatch'")[0].pattern
  Assert match =~ '%2l', match
  Assert match =~ '%2c', match

Execute (#40 Escape / or ? when valid offset is not given):
  execute "normal /item/e\<cr>"
  AssertEqual 'item', @/

  execute "normal /item/item\<cr>"
  AssertEqual 'item\/item', @/

  execute "normal ?item?e\<cr>"
  AssertEqual 'item', @/

  execute "normal ?item?item\<cr>"
  AssertEqual 'item\?item', @/

  execute "normal /item\\/item2\<cr>"
  AssertEqual 'item\/item2', @/

# Cleanup
# ==============================================================================
Execute (Cleanup):
  set nohlsearch
  unlet match
  delfunction CurrentMatch
  delcommand AssertCurrentMatch

